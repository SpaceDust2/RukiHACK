
// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model Developer {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  projects   Project[]
  orders     Order[]
  reviews    Review[]  @relation("DeveloperReviews")
  messages   Message[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Employee {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  orders     Order[]
  reviews    Review[]  @relation("EmployeeReviews")
  messages   Message[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  developer   Developer @relation(fields: [developerId], references: [id])
  developerId Int
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id         Int            @id @default(autoincrement())
  title      String
  description String
  cost       Float
  project    Project        @relation(fields: [projectId], references: [id])
  projectId  Int
  developer  Developer      @relation(fields: [developerId], references: [id])
  developerId Int
  employee   Employee?      @relation(fields: [employeeId], references: [id])
  employeeId Int?
  history    OrderHistory[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Message {
  id          Int       @id @default(autoincrement())
  content     String
  senderId    Int
  receiverId  Int
  developer   Developer @relation(fields: [developerId], references: [id])
  developerId Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id            Int        @id @default(autoincrement())
  rating        Int
  comment       String
  developer     Developer? @relation("DeveloperReviews", fields: [developerId], references: [id])
  developerId   Int?
  employee      Employee?  @relation("EmployeeReviews", fields: [employeeId], references: [id])
  employeeId    Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model OrderHistory {
  id         Int       @id @default(autoincrement())
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    Int
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}